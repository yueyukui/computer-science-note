程序已被安装在 ./chatgpt-qq 下，
以下是一些维护的注意事项：
1. 你需要先 cd ./chatgpt-qq  才能进入到程序的安装目录。
2. 你可以输入docker-compose logs -f 来观察运行日志。
3. 如果你的 Mirai 需要验证码才能登录，使用 docker-compose run --rm mirai 启动登录程序，登录成功后按下 Ctrl + C 退出，然后重启程序。
4. 修改配置文件后，使用 docker-compose restart 重启程序。
5. 使用 docker-compose pull && docker-compose up -d 命令来更新程序
如果你记不住的话，可以把上面这段文字保存到一个文件里面，需要的时候再看。
如果您遇到问题可以在这里寻找答案： 
https://github.com/lss233/chatgpt-mirai-qq-bot/issues/85
如果您觉得此脚本对你有帮助的话，欢迎您在爱发电支持作者。
https://afdian.net/a/lss233
再见。

3 8 13 18 23


0 3 * * * (cd /root/chatgpt-qq && docker-compose pull && docker-compose up -d && docker-compose restart)

0 8 * * * (cd /root/chatgpt-qq && docker-compose pull && docker-compose up -d && docker-compose restart)

0 13 * * * (cd /root/chatgpt-qq && docker-compose pull && docker-compose up -d && docker-compose restart)

0 18 * * * (cd /root/chatgpt-qq && docker-compose pull && docker-compose up -d && docker-compose restart)

20 20 * * * (cd /root/chatgpt-qq && docker-compose pull && docker-compose up -d && docker-compose restart)

0 23 * * * (cd /root/chatgpt-qq && docker-compose pull && docker-compose up -d && docker-compose restart)

0 8 * * * cd /root/chatgpt-qq
0 8 * * * docker-compose pull
0 8 * * * docker-compose up -d
0 8 * * * docker-compose restart

0 13 * * * cd /root/chatgpt-qq
0 13 * * * docker-compose pull
0 13 * * * docker-compose up -d
0 13 * * * docker-compose restart

0 18 * * * cd /root/chatgpt-qq
0 18 * * * docker-compose pull
0 18 * * * docker-compose up -d
0 18 * * * docker-compose restart

20 20 * * * cd /root/chatgpt-qq
20 20 * * * docker-compose pull
20 20 * * * docker-compose up -d
20 20 * * * docker-compose restart

0 23 * * * cd /root/chatgpt-qq
0 23 * * * docker-compose pull
0 23 * * * docker-compose up -d
0 23 * * * docker-compose restart










# 这里是 ChatGPT for QQ 的所有配置文件
# 请注意：以 "#" 开头的文本均为注释
# 不会被程序读取
# 如果你想要使用某个设置，请确保前面没有 "#" 号

# 如果你想使用 go-cqhttp，则这么写：
# [onebot]
# qq=2013754792
# manager_qq = 请修改为机器人管理员的QQ号
# 此处的  reverse_ws_host 和 reverse_ws_port 对应
# go-cqhttp 中的 反向WS Universal 地址，如：ws://localhost:6555/ws
# reverse_ws_host = "0.0.0.0"
# reverse_ws_port = 6555

# 如果你想正常用 Mirai
# 就用下面这段配置
[mirai]
qq = 2013754792

manager_qq = 2407204875

# 以下设置如果不了解，可以不用理会
api_key = "1234567890"
# # 下面是 mirai api http 反向连接模式
# 使用此模式可以将本项目与 mirai 分离在两个不同服务器部署
reverse_ws_host = "0.0.0.0"
reverse_ws_port = 8554
# # 下面是 mirai api http 正向连接模式
# 使用此模式时需注释上面的反向连接模式
# http_url = "http://mirai:8080"
# ws_url = "http://mirai:8080"

# ==== OpenAI 账号部分开始
[openai]
# OpenAI 相关设置
# 自定义 ChatGPT 的 browserless 接入点
# 自 3月9日 开始，不设置此项将无法正常使用 browserless 模式下的网页版 ChatGPT
browserless_endpoint = "https://bypass.duti.tech/api/"

# 自定义 OpenAI 的 API 接口基础地址
# 通过此功能，你可以搭建一个 OpenAI 的反向代理来避免网络问题
# 例如此项目：https://github.com/Ice-Hazymoon/openai-scf-proxy
# api_endpoint = "https://api.openai.com/v1"


# 你可以用多种不同的方式登录 OpenAI
# 你也可以登录很多个不同的账号（无限多个）
# 下面的例子会向你演示使用不同方式登录时
# 配置文件的写法

# 第 1 个 OpenAI 账号
# 使用 邮箱+密码 登录
# 优点：
# 1. 自动刷新 access_token 和 session_token，无需人工操作
# 缺点：
# 1. 需要国外网络环境
# 2. 如果使用代理，需要确保你的代理未被 OpenAI 封禁
[[openai.accounts]]
mode = "browserless"

# 你的 OpenAI 邮箱
email = "yukuiyue@gmail.com"
# 你的 OpenAI 密码
password = "1527258806ZYK."

# # 下面是所有的 OpenAI 账号都可以有的设置
# # ========= 开始 ========

# # 如果你在国内，需要配置代理
# # 如果你用 Docker，记得把 127.0.0.1 改成你宿主机 IP（或者你代理程序的容器 IP）
#proxy="http://127.0.0.1:1080"

# 使用 Legacy 模型（仅ChatGPT Plus用户）
paid = false
# 使用 GPT-4 模型 （仅ChatGPT Plus用户）
gpt4 = false

# 是否开启标题自动重命名
# 若为空或保持注释即不开启
# 支持的变量： {session_id} - 此对话对应的上下文 ID，若产生在好友中，则为好友 QQ 号，若产生在群聊中，则为群号
# 具体见 README 中的介绍
title_pattern="qq-{session_id}"

# 是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容
auto_remove_old_conversations = true

# # 第 2 个 OpenAI 账号
# # 使用 access_token 登录
# # 优点：
# # 1. 适用于在国内网络环境
# # 2. 适用于通过 Google / 微软 注册的 OpenAI 账号
# # 3. 登录过程较快
# # 缺点：
# # 1. 有效期为 30 天，到期后需更换
# [[openai.accounts]]
# mode = "browserless"

# 你的 access_token，登录 OpenAI 后访问`https://chat.openai.com/api/auth/session`获取
# access_token = "一串 ey 开头的东西"

# # 如果你在国内，需要配置代理
# proxy="http://127.0.0.1:1080"

# # 使用 Legacy 模型（仅ChatGPT Plus用户）
# paid = false
# # 使用 GPT-4 模型 （仅ChatGPT Plus用户）
# gpt4 = false


# # 是否开启标题自动重命名
# title_pattern="qq-{session_id}"

# # 是否自动删除旧的对话
# auto_remove_old_conversations = true
# # ===== 结束 =====

# # 第 3 个 OpenAI 账号
# # 使用 session_token 登录
# # 此方法已很少人使用
# # 优点：
# # 1. 适用于通过 Google / 微软 注册的 OpenAI 账号
# # 缺点：
# # 1. 有效期较短，具体时间未知
# # 2. 登录过程需要几秒钟时间
# [[openai.accounts]]
# mode = "browserless"

# # 你的 session_token，使用方法见 README
# session_token = "一串 ey 开头的东西"

# # 如果你在国内，需要配置代理
# proxy="http://127.0.0.1:1080"

# # 使用 Legacy 模型（仅ChatGPT Plus用户）
# paid = false
# # 使用 GPT-4 模型 （仅ChatGPT Plus用户）
# gpt4 = false

# # 是否开启标题自动重命名
# title_pattern="qq-{session_id}"

# # 是否自动删除旧的对话
# auto_remove_old_conversations = true

# 第 4 个 OpenAI 账号
# 使用 api key 登录
# 当你设置了 API Key 之后
# 你就可以使用 OpenAI 中收费的 ChatGPT API、AI 画图等功能
# 优点：
# 1. 响应快
# 缺点：
# 1. 烧钱
# API Key 模式只有这两个配置项要填，别写其他的
# [[openai.accounts]]
# # 你的 API key，可以在这里看： https://platform.openai.com/account/api-keys
# api_key="sk-xxxxx"
# # 如果你在国内，需要配置代理
# proxy="http://127.0.0.1:1080"

# # 第 5 个 OpenAI 账号
# # # 理论上你可以添加无限多个 OpenAI 账号
# # # 你可以自行添加或删除配置文件来设置账号信息
# [[openai.accounts]]
# mode = "browserless"

# # 你的 OpenAI 邮箱
# email = "yukuiyue@gmail.com"
# # 你的 OpenAI 密码
# password = "1527258806ZYK."

# # 如果你在国内，需要配置代理
# proxy="http://127.0.0.1:1080"

# # 使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）
# paid = false

# # 是否开启标题自动重命名
# title_pattern="qq-{session_id}"

# # 是否自动删除旧的对话
# auto_remove_old_conversations = true

# === OpenAI 账号部分结束


# # === Bing 设置部分开始
# # 如果你没有 Bing 账号，可以直接删除这部分
# [bing]

# # 第 1 个 Bing 账号
# # 理论上，你可以添加无限多个 Bing 账号。
# # 多账号的配置方法和 OpenAI 的一样。
# [[bing.accounts]]
# # 你的账号 Cookie，获取方法见 README
# cookie_content = '一串很长的文本...'
# 如果你想用代理（可能有BUG）
# proxy="http://127.0.0.1:1080"
# === Bing 设置部分结束

[baiducloud]
#是否启动百度云内容安全审核
check = false

#百度云API_KEY 24位英文数字字符串
baidu_api_key = ""

#百度云SECRET_KEY 32位的英文数字字符串
baidu_secret_key =""

#不合规消息自定义返回
illgalmessage = "[百度云]请珍惜机器人，当前返回内容不合规"

[system]
# 是否自动同意进群邀请
accept_group_invite = false
# 是否自动同意好友请求
accept_friend_request = false

[presets]
# 切换预设的命令： 加载预设 猫娘
command = "加载预设 (\\w+)"
loaded_successful = "预设加载成功！"
scan_dir = "./presets/"

[presets.keywords]
# 预设关键词 <-> 实际文件
"聊天" = "presets/issue402.txt"
"猫娘" = "presets/catgirl.txt"

# 关键词为 default 的预设将会在每个新会话中被载入（也就是默认预设）
# issue402 是一份可以让 AI 读出消息发送者名字的预设
# （请注意，这意味着消息发送者的名字会发送给 AI）
# 你可以把 issue402 修改为你自己定义的文件
# "default" = "presets/default.txt"

# 下面这2个选项跟上面的mirai是冲突的，一次启动只能选一个。优先级为：onebot > telegram > discord > mirai
# [telegram]
# 这个 token 是找 BotFather 要的
# bot_token = "xxx"
# proxy = "http://localhost:1080"

# [discord]
# bot_token = "xxx"









Mirai的setting
#adapters:
 #- reverse-ws
 
#enableVerify: false
#verifyKey: 1234567890
#debug: false
#singleMode: false
#cacheSize: 4096
#adapterSettings:
 #reverse-ws:
    ## 远端 websocket server 地址配置
    #destinations:
   # - host: chatgpt
    #  port: 8554
    #  path: /
    #  protocol: ws
adapters:
  - http
  - ws
debug: true
enableVerify: false
verifyKey: 1234567890
singleMode: false
cacheSize: 4096
persistenceFactory: 'built-in'
adapterSettings:
  http:
    host: mirai
    port: 8080
    cors: ["*"]
  ws:
    host: mirai
    port: 8080
    reservedSyncId: -1




0 3 * * * /root/GptRestart.sh
0 8 * * * /root/GptRestart.sh
0 13 * * * /root/GptRestart.sh
0 18 * * * /root/GptRestart.sh
0 23 * * * /root/GptRestart.sh
0 21 * * 0 /root/DockerUpdata.sh
